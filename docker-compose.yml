# docker-compose.yml
# Este archivo define los servicios para el entorno de desarrollo local de CertiTrack.
# Incluye la base de datos PostgreSQL, el backend de Go y el frontend de React/Next.js.

services:
  # Servicio de la base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine # Usamos una imagen ligera de PostgreSQL
    restart: always # Reinicia el contenedor si falla
    environment:
      POSTGRES_DB: certitrack_db # Nombre de la base de datos
      POSTGRES_USER: user # Usuario de la base de datos
      POSTGRES_PASSWORD: password # Contraseña del usuario
    ports:
      - "5432:5432" # Mapea el puerto 5432 del contenedor al puerto 5432 del host
    volumes:
      - postgres_data:/var/lib/postgresql/data # Volumen persistente para los datos de la DB
      - ./backend/db_init:/docker-entrypoint-initdb.d 
    networks:
      - certitrack_network # Red compartida con otros servicios

  # Servicio del backend de Go (Gin)
  backend:
    build:
      context: ./backend # Ruta al directorio del backend
      dockerfile: Dockerfile # El Dockerfile está directamente en ./backend/Dockerfile
    restart: always
    ports:
      - "8080:8080" # Mapea el puerto 8080 del contenedor al puerto 8080 del host
    environment:
      DB_HOST: postgres # El nombre del servicio de PostgreSQL en la red Docker
      DB_PORT: 5432
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: certitrack_db
      API_PORT: 8080
      # Otras variables de entorno necesarias para el backend (ej. JWT_SECRET, EMAIL_API_KEY)
      # JWT_SECRET: "your_jwt_secret_key"
      # SES_API_KEY: "your_ses_api_key"
    depends_on:
      - postgres # Asegura que PostgreSQL se inicie antes que el backend
    networks:
      - certitrack_network

  # Servicio del frontend de React/Next.js
  frontend:
    build:
      context: ./frontend # Ruta al directorio del frontend
      dockerfile: Dockerfile # El Dockerfile está directamente en ./frontend/Dockerfile
    restart: always
    ports:
      - "3000:3000" # Mapea el puerto 3000 del contenedor al puerto 3000 del host (puerto de desarrollo de React/Next.js)
    environment:
      # URL del backend, accesible desde el navegador del usuario
      NEXT_PUBLIC_API_URL: http://localhost:8080/api/v1 # O la URL de tu API en desarrollo
      # Si el frontend necesita acceder al backend DENTRO de la red Docker (ej. para SSR en Next.js)
      # INTERNAL_API_URL: http://backend:8080/api/v1
    depends_on:
      - backend # Asegura que el backend se inicie antes que el frontend
    networks:
      - certitrack_network

# Definición de volúmenes para persistencia de datos
volumes:
  postgres_data: # Volumen para los datos de PostgreSQL

# Definición de la red para la comunicación entre servicios
networks:
  certitrack_network:
    driver: bridge